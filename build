#!/bin/bash

set -euxo pipefail

# Config

# Output file
IMAGE_PATH="$1"

# Full image size
IMAGE_SIZE=10GiB

# Packages to install, not including base and boot stuff
PACKAGES=()

# Hostname of the system when booted
HOSTNAME="arch-image"

# Path to a script containing specific setup actions.
# This script will run inside the new filesystem, with PACKAGES already installed.
# Anything left in /tmp will be discarded (/tmp is a tmpfs).
# The data directory is NOT yet present but entries in fstab will bind mount it in various places
# on boot.
# At the least, you probably want to set up a user.
SETUP_SCRIPT=setup-test

# End Config

BASE_PACKAGES=(base linux linux-firmware grub)
HERE=$(dirname "$(realpath "$0")")

# functions to run on exit, in reverse order. errors are ignored.
CLEANUP=()

do_cleanup() {
	if [ -n "${NO_CLEANUP:-}" ]; then
		return
	fi
	for ((i=${#CLEANUP[@]}-1; i>=0; i--)); do
		"${CLEANUP[$i]}" || true
	done
}
trap 'do_cleanup' exit

main() {
	# Delete existing image if it exists
	if [ -f "$IMAGE_PATH" ]; then
		rm "$IMAGE_PATH"
	fi
	# Create image file of given size
	truncate --size "$IMAGE_SIZE" "$IMAGE_PATH"
	# Create partitions:
	# 1 - 100MB EFI partition
	# 2 - Read-only root fs
	# We will shrink the root fs later and put in a data partition.
	sgdisk \
		--new=1:0:+100M --typecode=1:EF02 \
		--new=2:0:0 --typecode=2:8300 \
		"$IMAGE_PATH"
	# Attach image as a loop device so we can access individual partitions.
	# Use first available loop device, and print it.
	LOOP_DEVICE=$(sudo losetup --partscan --find --show "$IMAGE_PATH")
	detach_loop() { sudo losetup -d "$LOOP_DEVICE"; }
	CLEANUP+=(detach_loop)
	# Collect some info for later
	EFI_DEVICE="${LOOP_DEVICE}p1"
	EFI_PARTUUID=$(lsblk -o partuuid --noheadings "$EFI_DEVICE")
	ROOT_DEVICE="${LOOP_DEVICE}p2"
	ROOT_PARTUUID=$(lsblk -o partuuid --noheadings "$ROOT_DEVICE")
	DATA_DEVICE="${LOOP_DEVICE}p3"
	DATA_PARTUUID=$(uuidgen)
	# Format EFI parition as FAT32, as required
	sudo mkfs.fat "$EFI_DEVICE"
	# Format root partition as ext4
	sudo mkfs.ext4 -L root -U random "$ROOT_DEVICE"
	# Prepare mount point
	MOUNT_PATH=$(mktemp -d)
	delete_mount_path() { rmdir "$MOUNT_PATH"; }
	CLEANUP+=(delete_mount_path)
	# Mount things
	sudo mount "$ROOT_DEVICE" "$MOUNT_PATH"
	unmount() { sudo umount -R "$MOUNT_PATH"; }
	CLEANUP+=(unmount)
	sudo mkdir -p "$MOUNT_PATH/boot"
	sudo mount "$EFI_DEVICE" "$MOUNT_PATH/boot"
	# Install base packages. Use host's package cache (less downloads + less space taken in image)
	sudo pacstrap -c "$MOUNT_PATH" "${BASE_PACKAGES[@]}" "${PACKAGES[@]}"
	# Write fstab
	# Note our initcpio hook means that / is not our real root here, it's replaced by an overlayfs
	# which covers it with a tmpfs.
	sudo tee "$MOUNT_PATH/etc/fstab" >/dev/null <<-EOF
		# <file system>	<dir>	<type>	<options>	<dump>	<pass>
		PARTUUID=$ROOT_PARTUUID	/	ext4	ro	0	0
		PARTUUID=$EFI_PARTUUID	/boot	fat	ro	0	0
		PARTUUID=$DATA_PARTUUID	/mnt	ext4	rw,relatime,data=ordered	0	0
		/mnt/var_log	/var/log	none	rw,bind	0	0
	EOF
	# Set up initcpio hook for overlay
	sudo cp "$HERE/overlayroot-install" "$MOUNT_PATH/etc/initcpio/install/overlayroot"
	sudo cp "$HERE/overlayroot-hook" "$MOUNT_PATH/etc/initcpio/hooks/overlayroot"
	sudo arch-chroot "$MOUNT_PATH" mkinitcpio -P --addhooks overlayroot
	# Set UTC timezone
	sudo ln -s /usr/share/zoneinfo/Universal "$MOUNT_PATH/etc/localtime"
	# Set hostname
	sudo tee "$MOUNT_PATH/etc/hostname" >/dev/null <<<"$HOSTNAME"
	# Set up bootloader
	sudo arch-chroot "$MOUNT_PATH" grub-install \
		--target=x86_64-efi \
		--efi-directory="/boot" \
		--bootloader-id=GRUB \
		--removable --no-nvram
	# Run user setup script
	sudo cp "$SETUP_SCRIPT" "$MOUNT_PATH/setup"
	sudo chmod +x "$MOUNT_PATH/setup"
	sudo arch-chroot "$MOUNT_PATH" /setup
	sudo rm "$MOUNT_PATH/setup"
	# Resize root fs to minimum size. To do this it needs to be unmounted.
	unmount
	sudo resize2fs -f -M "$ROOT_DEVICE"
	# Get the new fs size
	FS_KIB=$(sudo dumpe2fs -h "$ROOT_DEVICE" | awk -F: '
		$1 ~ /Block count/ { count=$2 }
		$1 ~ /Block size/ { size=$2 }
		END { print count*size/1024 }
	')
	# Resize the rootfs partition to the new filesystem size,
	# then make the data partition (with the uuid we pre-allocated) in the remaining space.
	sudo sgdisk \
		--delete=2 \
		--new="2:0:+${FS_KIB}K" \
		--new=3:0:0 \
		--partition-guid="3:$DATA_PARTUUID" \
		"$LOOP_DEVICE"
	# Make the data partition, mount it and create bind directories
	sudo mkfs.ext4 -F "$DATA_DEVICE"
	sudo mount "$DATA_DEVICE" "$MOUNT_PATH"
	sudo mkdir -p "$MOUNT_PATH/var_log"
}

main
